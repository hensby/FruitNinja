 using UnityEngine;
using System.Collections;
using UnityEngine.UI;
using System.Collections.Generic;

public class DetectFr : MonoBehaviour
{
	public HalfFruit fruitClone;
	private GameRule gameRule;
	public int forceX = 300;
	public int forceHalfY = 3000;
	private const int fruitOutY = -275;
	public Splash splashClone;
	private Vector2 lastRightHandPos = new Vector2(0,0);
	private Vector2 lastleftHandPos = new Vector2(0,0);
	private bool[] ifFirstRightHandPos;
	private bool[] ifFirstLeftHandPos;
	public AudioClip slatter;
	public AudioClip boom;
	AudioSource sound;
	private int playerNum;

	void Start ()
	{
		playerNum = SingularValue.playerNumber;
		initIfFirstHandPos ();
		GameObject gamePanelObj = GameObject.FindWithTag ("Game");
		gameRule = gamePanelObj.GetComponent<GameRule> ();
		sound = gamePanelObj.GetComponent<AudioSource> ();
	}

	void Update ()
	{
		bool needDestroyFruit = false;
		bool isOutDestroy = false;

		if (KinectManager.Instance.IsUserDetected ()) {
			List<long> players = new List<long> ();
			players = KinectManager.Instance.GetUsersIdByNum (playerNum);
			int jointRightType = (int)KinectInterop.JointType.HandRight;//表示右手
			int jointLeftType = (int)KinectInterop.JointType.HandLeft;//表示左手
			foreach (long userId in players) {
				if (KinectManager.Instance.IsJointTracked (userId, jointRightType)) {
					Vector3 HandPos = KinectManager.Instance.GetJointKinectPosition (userId, jointRightType);//获取右手信息
					Vector3 HandScreenPos = Camera.main.WorldToScreenPoint (HandPos);//右手转换到屏幕坐标
					Vector2 HandScrPos = new Vector2 (HandScreenPos.x, HandScreenPos.y);//三维坐标转换到二维
					if (RectTransformUtility.RectangleContainsScreenPoint (gameObject.transform as RectTransform, HandScrPos, Camera.main) && Vector2.Distance(lastRightHandPos,HandScrPos) > SingularValue.minDistance) {
						if(!ifFirstRightHandPos[players.IndexOf(userId)]){
							needDestroyFruit = true;
						}
						else {
							ifFirstRightHandPos[players.IndexOf(userId)] = false;
						}
					}
					lastRightHandPos = HandScrPos;
				} 
				if (KinectManager.Instance.IsJointTracked (userId, jointLeftType)) {
					Vector3 HandPos = KinectManager.Instance.GetJointKinectPosition (userId, jointLeftType);
					Vector3 HandScreenPos = Camera.main.WorldToScreenPoint (HandPos);
					Vector2 HandScrPos = new Vector2 (HandScreenPos.x, HandScreenPos.y);
					if (RectTransformUtility.RectangleContainsScreenPoint (gameObject.transform as RectTransform, HandScrPos, Camera.main) && Vector2.Distance(lastleftHandPos,HandScrPos) > SingularValue.minDistance) {
						if(!ifFirstLeftHandPos[players.IndexOf(userId)])
						{
							needDestroyFruit = true;
							
						}
						else {
							ifFirstLeftHandPos[players.IndexOf(userId)] = false;
						}
					}
					lastleftHandPos = HandScrPos;
				}
			}
 
		}
			
		RectTransform rtf = gameObject.transform as RectTransform;
		float curFruitY = rtf.anchoredPosition.y;
		if (curFruitY < fruitOutY) {
			needDestroyFruit = true;
			isOutDestroy = true;
		}
		if (needDestroyFruit && gameRule.lifeNum > 0) {
			if (isOutDestroy) {
				if (gameObject.GetComponent<Fruit> ().type == Contant.Type_Boom) {
					gameRule.scoreNum++;
				}
				else {
					gameRule.lifeNum--;
				}
			} else {
				if (gameObject.GetComponent<Fruit> ().type == Contant.Type_Boom) {
					if (gameRule.scoreNum >= 3)
						gameRule.scoreNum -= 3;
					else
						gameRule.scoreNum = 0;
				} else {
					gameRule.scoreNum++;					      
				}
			}
		} 

		gameRule.lifeContent.setLife (gameRule.lifeNum);
		gameRule.scoreTxt.text = gameRule.scoreNum + "";

		if (needDestroyFruit) {
			if (isOutDestroy == false) {
				if (gameObject.GetComponent<Fruit> ().type != Contant.Type_Boom) {
					createRightLeftFruit ();
					playMusic (slatter);
					Destroy (gameObject);			
				} else {
					playMusic (boom);
					Destroy (gameObject);
				}
				
			} else {
				Destroy (gameObject);
			}
		}

	}

	private void createRightLeftFruit ()
	{
		HalfFruit leftFruit = Instantiate (fruitClone, transform.position, transform.rotation) as HalfFruit;
		leftFruit.setType (gameObject.GetComponent<Fruit> ().type + 1);
		newFruitInit (leftFruit, true);
		HalfFruit rightFruit = Instantiate (fruitClone, transform.position, transform.rotation) as HalfFruit;
		rightFruit.setType (gameObject.GetComponent<Fruit> ().type + 2);
		newFruitInit (rightFruit, false);
		Splash sl = Instantiate (splashClone) as Splash;
		sl.setColor (gameObject.GetComponent<Fruit> ().type);
		newSplashInit (sl);
		Destroy (sl.gameObject, 1f);
	}

	private void newSplashInit (Splash s)
	{
		RectTransform curRtf = transform as RectTransform;
		s.transform.SetParent (gameRule.transform);
		RectTransform rtf = s.transform as RectTransform;
		rtf.anchoredPosition3D = new Vector3 (0, 0, 0);
		rtf.anchoredPosition = curRtf.anchoredPosition;
		rtf.localScale = new Vector3 (1, 1, 1);
	}

	private void newFruitInit (HalfFruit fruit, bool isLeft)
	{
		
		RectTransform curRtf = transform as RectTransform;
		fruit.transform.SetParent (gameRule.transform);
		RectTransform rtf = fruit.transform as RectTransform;
		rtf.anchoredPosition3D = new Vector3 (0, 0, 0);
		rtf.anchoredPosition = curRtf.anchoredPosition;
		rtf.localScale = new Vector3 (1, 1, 1);
		Rigidbody2D rb2d = fruit.GetComponent<Rigidbody2D> ();
		if (isLeft) {
			rb2d.AddForce (new Vector2 (-forceX, forceHalfY));
		} else {
			rb2d.AddForce (new Vector2 (forceX, forceHalfY));
		}
	}

	private void playMusic (AudioClip music)
	{
		sound.clip = music;
		sound.pitch = 1;
		sound.volume = 1;
		sound.Play ();
	}

	private void initIfFirstHandPos(){
		ifFirstRightHandPos = new bool[playerNum];
		ifFirstLeftHandPos = new bool[playerNum];
		for (int i = 0; i < playerNum; i++) {
			ifFirstLeftHandPos[i] = true;
			ifFirstRightHandPos[i] = true;
		}
	}
}
