using UnityEngine;
using System.Collections;
using UnityEngine.UI;

public class UseKinectManager : MonoBehaviour
{
	private PanelCenter panelCenter;
	public Image button1;
	public Image button2;
	public Image button3;
	public Image circle1;
	public Image circle2;
	public Image circle3;
	public Image teachBtn;
	private bool ifTeachClick = false;
	public int upForce = 2000;
	public int gravityScale = 10;
	private ImageToUserMap imageToUserMap;
	public RawImage kinectImg;
	private Image curBtn;
	private int curBtnOutY = -300;
	public AudioClip start;
	public AudioClip menu;
	AudioSource sound;

	void Start ()
	{
		GameObject canvasObj = GameObject.FindWithTag ("Canvas");
		panelCenter = canvasObj.GetComponent<PanelCenter> ();
		imageToUserMap = canvasObj.GetComponent<ImageToUserMap> ();
		imageToUserMap.kinectImg = kinectImg;
		sound = gameObject.GetComponent<AudioSource> ();
		sound.clip = menu;
		sound.Play ();
	}

	void Update ()
	{

		if (Input.GetKeyDown (KeyCode.Escape)) {
			if (Screen.fullScreen) {
				WindowModeChange ();
				Debug.Log ("WindowMode");
			} 
			else{
				FullScreenSet();
				Debug.Log ("Full Screen");
			}
				
		}
		if (KinectManager.Instance.IsUserDetected ()) {
			long userId = KinectManager.Instance.GetPrimaryUserID ();
			int jointType = (int)KinectInterop.JointType.HandRight;
			if (KinectManager.Instance.IsJointTracked (userId, jointType)) {
				Vector3 HandPos = KinectManager.Instance.GetJointKinectPosition (userId, jointType);
				Vector3 HandScreenPos = Camera.main.WorldToScreenPoint (HandPos);
				Vector2 HandScrPos = new Vector2 (HandScreenPos.x, HandScreenPos.y);
				/*
				Vector2 HandUguiPos;
				if (RectTransformUtility.ScreenPointToLocalPointInRectangle ((RectTransform)canvas.transform, HandScrPos, Camera.main, out HandUguiPos)) {
					//表示右手在canvas所表示的矩形范围内
					//RectTransform rightRectf = rightHand.transform as RectTransform;
					//rightRectf.anchoredPosition = HandUguiPos;//将表示右手的图片位置定位到手的位置
						                                             
				}
				*/
				bool isHandClosed = false;
				//rightHand.sprite = handStateSprites [0];
				if (KinectManager.Instance.GetRightHandState (userId) == KinectInterop.HandState.Closed) {
					isHandClosed = true;
					//rightHand.sprite = handStateSprites [1];
				}
				if (isHandClosed) {
					if (circle1.enabled == true && RectTransformUtility.RectangleContainsScreenPoint (circle1.rectTransform, HandScrPos, Camera.main)) {
						HandClickFruit (button1);
					} else if (circle2.enabled == true && RectTransformUtility.RectangleContainsScreenPoint (circle2.rectTransform, HandScrPos, Camera.main)) {
						HandClickFruit (button2);
					} else if (circle3.enabled == true && RectTransformUtility.RectangleContainsScreenPoint (circle3.rectTransform, HandScrPos, Camera.main)) {
						HandClickFruit (button3);
					}
					else if(!ifTeachClick && RectTransformUtility.RectangleContainsScreenPoint(teachBtn.rectTransform, HandScrPos,Camera.main)){
						HandClickFruit(teachBtn);
						ifTeachClick = true;
					}
				}
			} 
		}
		deteCurBtn ();
	}

	private void deteCurBtn ()
	{
		if (curBtn != null) {
			RectTransform rtf = curBtn.transform as RectTransform;
			if (rtf.anchoredPosition.y < curBtnOutY) {
				if (curBtn == button2) {
					panelCenter.showGamePanel ();
					Destroy (gameObject);
				} else if (curBtn == button3) {
					Application.Quit ();
				} else if (curBtn == button1) {
					panelCenter.showGame2Panel ();
					Destroy (gameObject);
				}else if(curBtn == teachBtn){
					panelCenter.showGamePanel();
					SingularValue.ifTeach = true;
					Destroy (gameObject);
				}

			}
		}
	}

	//切到水果的处理函数
	private void HandClickFruit (Image clickFruit)
	{
		Rigidbody2D r1 = button1.GetComponent<Rigidbody2D> ();
		Rigidbody2D r2 = button2.GetComponent<Rigidbody2D> ();
		Rigidbody2D r3 = button3.GetComponent<Rigidbody2D> ();
		Rigidbody2D teachR = teachBtn.GetComponent<Rigidbody2D>();
		r1.gravityScale = gravityScale;
		r2.gravityScale = gravityScale;
		r3.gravityScale = gravityScale;
		teachR.gravityScale = gravityScale;
		circle1.enabled = false;
		circle2.enabled = false;
		circle3.enabled = false;

		curBtn = clickFruit;


		if (clickFruit == button1) {
			r1.AddForce (new Vector2 (0, upForce));
			if (audio.isPlaying) {
				audio.Stop ();
				PlayMusic (start);
			}
		} else if (clickFruit == button2) {
			r2.AddForce (new Vector2 (0, upForce));
			if (audio.isPlaying) {
				audio.Stop ();
				PlayMusic (start);
			}
		} else if (clickFruit == button3) {
			r3.AddForce (new Vector2 (0, upForce));
		} else {
			teachR.AddForce(new Vector2(0,1000));
		}

	}

	private void PlayMusic (AudioClip music)
	{
		sound.clip = music;
		sound.Play ();
	}

	public void WindowModeChange ()
	{
		Resolution[] resolutions = Screen.resolutions;
		Screen.SetResolution (resolutions [resolutions.Length - 1].width, resolutions [resolutions.Length - 1].height, false);  
		Screen.fullScreen = false;
	}
	public void FullScreenSet(){
		Resolution[] resolutions = Screen.resolutions;
		Screen.SetResolution(resolutions[resolutions.Length - 1].width, resolutions[resolutions.Length - 1].height,true);  
		Screen.fullScreen = true;
	}
}
